// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: foodie.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodieReelsClient is the client API for FoodieReels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodieReelsClient interface {
	Spin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*FoodieReelsResult, error)
}

type foodieReelsClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodieReelsClient(cc grpc.ClientConnInterface) FoodieReelsClient {
	return &foodieReelsClient{cc}
}

func (c *foodieReelsClient) Spin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*FoodieReelsResult, error) {
	out := new(FoodieReelsResult)
	err := c.cc.Invoke(ctx, "/slot.FoodieReels/Spin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodieReelsServer is the server API for FoodieReels service.
// All implementations must embed UnimplementedFoodieReelsServer
// for forward compatibility
type FoodieReelsServer interface {
	Spin(context.Context, *Request) (*FoodieReelsResult, error)
	mustEmbedUnimplementedFoodieReelsServer()
}

// UnimplementedFoodieReelsServer must be embedded to have forward compatible implementations.
type UnimplementedFoodieReelsServer struct {
}

func (UnimplementedFoodieReelsServer) Spin(context.Context, *Request) (*FoodieReelsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spin not implemented")
}
func (UnimplementedFoodieReelsServer) mustEmbedUnimplementedFoodieReelsServer() {}

// UnsafeFoodieReelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodieReelsServer will
// result in compilation errors.
type UnsafeFoodieReelsServer interface {
	mustEmbedUnimplementedFoodieReelsServer()
}

func RegisterFoodieReelsServer(s grpc.ServiceRegistrar, srv FoodieReelsServer) {
	s.RegisterService(&FoodieReels_ServiceDesc, srv)
}

func _FoodieReels_Spin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodieReelsServer).Spin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slot.FoodieReels/Spin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodieReelsServer).Spin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodieReels_ServiceDesc is the grpc.ServiceDesc for FoodieReels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodieReels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slot.FoodieReels",
	HandlerType: (*FoodieReelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spin",
			Handler:    _FoodieReels_Spin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foodie.proto",
}
