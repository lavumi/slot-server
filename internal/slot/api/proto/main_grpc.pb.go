// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Slot_Enter_FullMethodName = "/slot.Slot/Enter"
	Slot_Spin_FullMethodName  = "/slot.Slot/Spin"
)

// SlotClient is the client API for Slot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlotClient interface {
	Enter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*EnterResponse, error)
	Spin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SpinResponse, error)
}

type slotClient struct {
	cc grpc.ClientConnInterface
}

func NewSlotClient(cc grpc.ClientConnInterface) SlotClient {
	return &slotClient{cc}
}

func (c *slotClient) Enter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*EnterResponse, error) {
	out := new(EnterResponse)
	err := c.cc.Invoke(ctx, Slot_Enter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotClient) Spin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SpinResponse, error) {
	out := new(SpinResponse)
	err := c.cc.Invoke(ctx, Slot_Spin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlotServer is the server API for Slot service.
// All implementations must embed UnimplementedSlotServer
// for forward compatibility
type SlotServer interface {
	Enter(context.Context, *Request) (*EnterResponse, error)
	Spin(context.Context, *Request) (*SpinResponse, error)
	mustEmbedUnimplementedSlotServer()
}

// UnimplementedSlotServer must be embedded to have forward compatible implementations.
type UnimplementedSlotServer struct {
}

func (UnimplementedSlotServer) Enter(context.Context, *Request) (*EnterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedSlotServer) Spin(context.Context, *Request) (*SpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spin not implemented")
}
func (UnimplementedSlotServer) mustEmbedUnimplementedSlotServer() {}

// UnsafeSlotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlotServer will
// result in compilation errors.
type UnsafeSlotServer interface {
	mustEmbedUnimplementedSlotServer()
}

func RegisterSlotServer(s grpc.ServiceRegistrar, srv SlotServer) {
	s.RegisterService(&Slot_ServiceDesc, srv)
}

func _Slot_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slot_Enter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotServer).Enter(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slot_Spin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotServer).Spin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slot_Spin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotServer).Spin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Slot_ServiceDesc is the grpc.ServiceDesc for Slot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slot.Slot",
	HandlerType: (*SlotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enter",
			Handler:    _Slot_Enter_Handler,
		},
		{
			MethodName: "Spin",
			Handler:    _Slot_Spin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
